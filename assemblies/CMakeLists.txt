set(KEYFILE ${CMAKE_CURRENT_SOURCE_DIR}/key.snk)

find_package(Qt4 COMPONENTS QtDBus)
find_package(Smoke COMPONENTS Phonon)

if (ENABLE_QYOTO_PLUGIN)
    add_subdirectory(qyoto-qtcore)
    if (QT_QTDBUS_LIBRARY)
        # Not always present (e.g. Windows).
        add_subdirectory(qyoto-qtdbus)
    endif (QT_QTDBUS_LIBRARY)
    add_subdirectory(qyoto-qtgui)
    add_subdirectory(qyoto-qtnetwork)
    add_subdirectory(qyoto-qtopengl)
    add_subdirectory(qyoto-qtscript)
    add_subdirectory(qyoto-qtsql)
    add_subdirectory(qyoto-qtsvg)
    add_subdirectory(qyoto-qtuitools)
    add_subdirectory(qyoto-qtwebkit)
    add_subdirectory(qyoto-qtxml)
    add_subdirectory(qyoto-qtxmlpatterns)
    if (SMOKE_PHONON_LIBRARY)
        # Not always present (e.g. Windows).
        add_subdirectory(qyoto-phonon)
    endif (SMOKE_PHONON_LIBRARY)
endif (ENABLE_QYOTO_PLUGIN)

set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)

if (ENABLE_KIMONO_PLUGIN)
	find_package(KDE4 REQUIRED)
    add_subdirectory(kimono-attica)
    add_subdirectory(kimono-kdecore)
    add_subdirectory(kimono-kdeui)
    add_subdirectory(kimono-kfile)
    add_subdirectory(kimono-khtml)
    add_subdirectory(kimono-kio)
    add_subdirectory(kimono-kparts)
    add_subdirectory(kimono-ktexteditor)
    add_subdirectory(kimono-plasma)
    add_subdirectory(kimono-solid)
endif (ENABLE_KIMONO_PLUGIN)
